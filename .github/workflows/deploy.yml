name: Deploy Glassroot

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  # Build and test
  test:
    runs-on: ubuntu-latest
    name: Build and Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Build API
        run: npm run build:api

      - name: Build Client
        run: npm run build:client
        env:
          VITE_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}

  # Deploy API to Cloudflare Workers
  deploy-api:
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Deploy API
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install API dependencies
        run: npm ci
        working-directory: ./api

      - name: Deploy to Cloudflare Workers
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: './api'
          command: deploy --env ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

  # Deploy Client to Cloudflare Pages
  deploy-client:
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Deploy Client
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install client dependencies
        run: npm ci
        working-directory: ./client

      - name: Build client
        run: npm run build
        working-directory: ./client
        env:
          VITE_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: './client'
          command: pages deploy dist --project-name=glassroot --branch=${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}

  # Deploy mobile apps (optional, when tagged)
  deploy-mobile:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    name: Build Mobile Apps
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: Build client
        run: cd client && npm run build
        env:
          VITE_API_URL: ${{ secrets.PROD_API_URL }}

      - name: Sync Capacitor
        run: cd client && npm run sync

      - name: Build iOS
        run: |
          cd client/ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath $PWD/build/App.xcarchive \
            archive

      # Add Android build steps if needed